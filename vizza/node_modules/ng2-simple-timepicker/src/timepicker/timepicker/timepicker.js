var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { NgModel } from '@angular/forms';
import { Directive, ElementRef, Renderer, EventEmitter, Output, Input } from '@angular/core';
import "reflect-metadata";
var TimePickerConfig = (function () {
    function TimePickerConfig() {
        //Override where the dropdown is appended.
        //Takes either a string to use as a selector, a function that gets passed the clicked input element as argument or a jquery object to use directly.
        this.appendTo = "body";
        //Close the timepicker when the window is scrolled. (Replicates <select> behavior.)
        this.closeOnWindowScroll = false;
        //Disable typing in the timepicker input box; force users to select from list. More information here.
        this.disableTextInput = false;
        //Disable the onscreen keyboard for touch devices. There can be instances where Firefox or Chrome have touch events enabled (such as on Surface tablets but not actually be a touch device. In this case disableTouchKeyboard will prevent the timepicker input field from being focused. More information here.
        this.disableTouchKeyboard = false;
        //Force update the time to step settings as soon as it loses focus.
        this.forceRoundTime = false;
        //Language constants used in the timepicker. Can override the defaults by passing an object with one or more of the following properties: decimal, mins, hr, hrs.
        this.lang = { am: 'am', pm: 'pm', AM: 'AM', PM: 'PM', decimal: '.', mins: 'mins', hr: 'hr', hrs: 'hrs' };
        //The time that should appear first in the dropdown list.
        this.minTime = "12:00am";
        this.selectOnBlur = false;
        //Update the input with the currently highlighted time value when the timepicker loses focus.
        //Show "24:00" as an option when using 24-hour time format. You must also set timeFormat for this option to work.
        this.show2400 = false;
        //Shows the relative time for each item in the dropdown. minTime or durationTime must be set.
        this.showDuration = false;
        //The amount of time, in minutes, between each item in the dropdown. Alternately, you can specify a function to generate steps dynamically. The function will receive a count integer (0, 1, 2...) and is expected to return a step integer.
        this.step = 30;
        //When scrolling on the edge of the picker, it prevent parent containers () to scroll. default: false
        this.stopScrollPropagation = false;
        //Highlight the nearest corresponding time option as a value is typed into the form input.
        this.typeaheadHighlight = true;
        //Convert the input to an HTML <SELECT> control. This is ideal for small screen devices, or if you want to prevent the user from entering arbitrary values. This option is not compatible with the following options: appendTo, closeOnWindowScroll, disableTouchKeyboard, forceRoundTime, scrollDefault, selectOnBlur, typeAheadHighlight.
        this.useSelect = false;
        //If a time greater than 24 hours (27:30, for example) is entered, apply modolo 24 to create a valid time. Setting this to false will cause an input of 27:30 to result in a timeFormatError event.
        this.wrapHours = true;
    }
    return TimePickerConfig;
}());
export { TimePickerConfig };
var TimePicker = (function () {
    function TimePicker(_renderer, _elementRef, _ngModel) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ngModel = _ngModel;
        this.changeTime = new EventEmitter();
        this.timeFormatError = new EventEmitter();
        this.hideTimepicker = new EventEmitter();
        this.selectTime = new EventEmitter();
        this.showTimepicker = new EventEmitter();
        this.timeRangeError = new EventEmitter();
        this.onChange = function (_) {
        };
        this.onTouched = function () {
        };
    }
    TimePicker.prototype.ngOnChanges = function () {
        var self = this;
        var el = $(this._elementRef.nativeElement);
        // Unbinding if timepicker present
        el.timepicker('remove');
        el.timepicker(this.options);
        el.on('changeTime', function (event) {
            self.onUpdate(event);
            self.changeTime.emit(event);
        });
        el.on('timeFormatError', function (event) {
            self.timeFormatError.emit(event);
        });
        el.on('hideTimepicker', function (event) {
            self.hideTimepicker.emit(event);
        });
        el.on('selectTime', function (event) {
            self.selectTime.emit(event);
        });
        el.on('showTimepicker', function (event) {
            self.showTimepicker.emit(event);
        });
        el.on('timeRangeError', function (event) {
            self.timeRangeError.emit(event);
        });
    };
    TimePicker.prototype.onUpdate = function (event) {
        var value = this._elementRef.nativeElement.value;
        this.writeValue(value);
        this._ngModel.viewToModelUpdate(value);
        this._elementRef.nativeElement.dispatchEvent(new Event('change', { bubbles: true }));
    };
    TimePicker.prototype.writeValue = function (value) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
    };
    TimePicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    TimePicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    return TimePicker;
}());
__decorate([
    Input('ng2-simple-timepicker'),
    __metadata("design:type", TimePickerConfig)
], TimePicker.prototype, "options", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "changeTime", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "timeFormatError", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "hideTimepicker", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "selectTime", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "showTimepicker", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], TimePicker.prototype, "timeRangeError", void 0);
TimePicker = __decorate([
    Directive({
        selector: '[ng2-simple-timepicker]',
        host: {
            '(change)': 'onChange($event.target.value)', '(blur)': 'onChange($event.target.value)'
        }
    }),
    __metadata("design:paramtypes", [Renderer, ElementRef, NgModel])
], TimePicker);
export { TimePicker };
