import { Injectable, Component, EventEmitter, HostListener, Input, Output, Pipe, ElementRef, ViewChild, Directive, forwardRef, Inject, Optional, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, merge } from 'rxjs';
import * as moment from 'moment';
import { utc } from 'moment';
import { animate, style, transition, trigger } from '@angular/animations';
import { filter } from 'rxjs/operators';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT, CommonModule } from '@angular/common';

var TimePeriod = {
    AM: 'AM',
    PM: 'PM',
};
var TimeFormat = {
    TWELVE: 'hh:mm a',
    TWENTY_FOUR: 'HH:mm',
};
var moment$1 = moment;
var DEFAULT_HOUR = {
    time: 12,
    angle: 360
};
var DEFAULT_MINUTE = {
    time: '00',
    angle: 360
};
var NgxMaterialTimepickerService = /** @class */ (function () {
    function NgxMaterialTimepickerService() {
        this.hourSubject = new BehaviorSubject(DEFAULT_HOUR);
        this.minuteSubject = new BehaviorSubject(DEFAULT_MINUTE);
        this.periodSubject = new BehaviorSubject(TimePeriod.AM);
    }
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "hour", {
        set: function (hour) {
            this.hourSubject.next(hour);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedHour", {
        get: function () {
            return this.hourSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "minute", {
        set: function (minute) {
            this.minuteSubject.next(minute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedMinute", {
        get: function () {
            return this.minuteSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "period", {
        set: function (period) {
            this.periodSubject.next(period);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedPeriod", {
        get: function () {
            return this.periodSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "fullTime", {
        get: function () {
            var hour = this.hourSubject.getValue().time;
            var minute = this.minuteSubject.getValue().time;
            var period = this.periodSubject.getValue();
            return hour + ":" + minute + " " + period;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerService.prototype, "defaultTime", {
        set: function (time) {
            var defaultTime = moment$1(time, TimeFormat.TWENTY_FOUR).toDate();
            if (moment$1(defaultTime).isValid()) {
                this.hour = Object.assign({}, DEFAULT_HOUR, { time: defaultTime.getHours() });
                this.minute = Object.assign({}, DEFAULT_MINUTE, { time: defaultTime.getMinutes() === 0 ? '00' : defaultTime.getMinutes() });
                this.period = (time.substr(time.length - 2).toUpperCase());
            }
        },
        enumerable: true,
        configurable: true
    });
    return NgxMaterialTimepickerService;
}());
NgxMaterialTimepickerService.decorators = [
    { type: Injectable },
];
NgxMaterialTimepickerService.ctorParameters = function () { return []; };
var TimeUnit = {
    HOUR: 0,
    MINUTE: 1,
};
TimeUnit[TimeUnit.HOUR] = "HOUR";
TimeUnit[TimeUnit.MINUTE] = "MINUTE";
var NgxMaterialTimepickerEventService = /** @class */ (function () {
    function NgxMaterialTimepickerEventService() {
        this.backdropClickSubject = new Subject();
        this.keydownEventSubject = new Subject();
    }
    Object.defineProperty(NgxMaterialTimepickerEventService.prototype, "backdropClick", {
        get: function () {
            return this.backdropClickSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMaterialTimepickerEventService.prototype, "keydownEvent", {
        get: function () {
            return this.keydownEventSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    return NgxMaterialTimepickerEventService;
}());
NgxMaterialTimepickerEventService.decorators = [
    { type: Injectable },
];
NgxMaterialTimepickerEventService.ctorParameters = function () { return []; };
var AnimationState = {
    ENTER: 'enter',
    LEAVE: 'leave',
};
var ESCAPE = 27;
var NgxMaterialTimepickerComponent = /** @class */ (function () {
    function NgxMaterialTimepickerComponent(timepickerService, eventService) {
        var _this = this;
        this.timepickerService = timepickerService;
        this.eventService = eventService;
        this.timePeriod = TimePeriod;
        this.timeUnit = TimeUnit;
        this.activeTimeUnit = TimeUnit.HOUR;
        this.isOpened = false;
        this.subscriptions = [];
        this.isEsc = true;
        this.timeSet = new EventEmitter();
        this.subscriptions.push(merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(filter(function (e) { return e.keyCode === ESCAPE && _this.isEsc; })))
            .subscribe(function () { return _this.close(); }));
    }
    NgxMaterialTimepickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.timepickerService.selectedHour.subscribe(function (hour) { return _this.selectedHour = hour; }));
        this.subscriptions.push(this.timepickerService.selectedMinute.subscribe(function (minute) { return _this.selectedMinute = minute; }));
        this.subscriptions.push(this.timepickerService.selectedPeriod.subscribe(function (period) { return _this.selectedPeriod = period; }));
    };
    NgxMaterialTimepickerComponent.prototype.onHourChange = function (hour) {
        this.timepickerService.hour = hour;
    };
    NgxMaterialTimepickerComponent.prototype.onMinuteChange = function (minute) {
        this.timepickerService.minute = minute;
    };
    NgxMaterialTimepickerComponent.prototype.changePeriod = function (period) {
        this.timepickerService.period = period;
    };
    NgxMaterialTimepickerComponent.prototype.changeTimeUnit = function (unit) {
        this.activeTimeUnit = unit;
    };
    NgxMaterialTimepickerComponent.prototype.setTime = function () {
        this.timeSet.next(this.timepickerService.fullTime);
        this.close();
    };
    NgxMaterialTimepickerComponent.prototype.setDefaultTime = function (time) {
        this.timepickerService.defaultTime = time;
    };
    NgxMaterialTimepickerComponent.prototype.open = function () {
        this.isOpened = true;
        this.animationState = AnimationState.ENTER;
    };
    NgxMaterialTimepickerComponent.prototype.close = function () {
        this.animationState = AnimationState.LEAVE;
    };
    NgxMaterialTimepickerComponent.prototype.animationDone = function (event) {
        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {
            this.isOpened = false;
        }
    };
    NgxMaterialTimepickerComponent.prototype.onKeydown = function (e) {
        this.eventService.keydownEventSubject.next(e);
    };
    NgxMaterialTimepickerComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    return NgxMaterialTimepickerComponent;
}());
NgxMaterialTimepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-material-timepicker',
                template: "<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\"\n         focusAnchor>\n        <header class=\"timepicker__header\">\n            <div class=\"timepicker-dial\">\n                <div class=\"timepicker-dial__time\">\n\t\t\t\t<span class=\"timepicker-dial__item\"\n                      [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.HOUR}\"\n                      (click)=\"changeTimeUnit(timeUnit.HOUR)\">\n\t\t\t\t\t{{selectedHour?.time | timeFormatter: timeUnit.HOUR}}</span>:<span\n                    class=\"timepicker-dial__item\"\n                    [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.MINUTE}\"\n                    (click)=\"changeTimeUnit(timeUnit.MINUTE)\">{{selectedMinute?.time | timeFormatter: timeUnit.MINUTE}}</span>\n                </div>\n                <div class=\"timepicker-dial__period\">\n\t\t\t<span class=\"timepicker-dial__item\"\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\n                  (click)=\"changePeriod(timePeriod.AM)\">AM</span>\n                    <span class=\"timepicker-dial__item\"\n                          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\n                          (click)=\"changePeriod(timePeriod.PM)\">PM</span>\n                </div>\n            </div>\n        </header>\n        <div class=\"timepicker__main-content\">\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\n                <ngx-material-timepicker-hours-face *ngSwitchCase=\"timeUnit.HOUR\"\n                                                    (hourChange)=\"onHourChange($event)\"\n                                                    [selectedHour]=\"selectedHour\"\n                                                    (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-hours-face>\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\n                                                      [selectedMinute]=\"selectedMinute\"\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\n            </div>\n            <div class=\"timepicker__actions\">\n                <div (click)=\"close()\">\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\n                </div>\n                <div (click)=\"setTime()\">\n                    <ng-container\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<ng-template #cancelBtnDefault>\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\n</ng-template>\n<ng-template #confirmBtnDefault>\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\n</ng-template>\n",
                styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;-webkit-box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__actions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;background-color:#fff}.timepicker-dial{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__period{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-left:10px;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:-webkit-box;display:-ms-flexbox;display:flex;width:515px}.timepicker__header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__main-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}.timepicker-dial{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.timepicker-dial__period{margin-left:0}}"],
                animations: [
                    trigger('timepicker', [
                        transition("* => " + AnimationState.ENTER, [
                            style({ transform: 'translateY(-30%)' }),
                            animate('0.2s ease-out', style({ transform: 'translateY(0)' }))
                        ]),
                        transition(AnimationState.ENTER + " => " + AnimationState.LEAVE, [
                            style({ transform: 'translateY(0)', opacity: 1 }),
                            animate('0.2s ease-out', style({ transform: 'translateY(-30%)', opacity: 0 }))
                        ])
                    ])
                ],
                providers: [NgxMaterialTimepickerService]
            },] },
];
NgxMaterialTimepickerComponent.ctorParameters = function () { return [
    { type: NgxMaterialTimepickerService, },
    { type: NgxMaterialTimepickerEventService, },
]; };
NgxMaterialTimepickerComponent.propDecorators = {
    "cancelBtnTmpl": [{ type: Input },],
    "confirmBtnTmpl": [{ type: Input },],
    "isEsc": [{ type: Input, args: ['ESC',] },],
    "timeSet": [{ type: Output },],
    "onKeydown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
var StyleSanitizerPipe = /** @class */ (function () {
    function StyleSanitizerPipe(domSanitizer) {
        this.domSanitizer = domSanitizer;
    }
    StyleSanitizerPipe.prototype.transform = function (value) {
        if (!value) {
            return value;
        }
        return this.domSanitizer.bypassSecurityTrustStyle(value);
    };
    return StyleSanitizerPipe;
}());
StyleSanitizerPipe.decorators = [
    { type: Pipe, args: [{
                name: 'styleSanitizer'
            },] },
];
StyleSanitizerPipe.ctorParameters = function () { return [
    { type: DomSanitizer, },
]; };
var HOURS = 12;
var NgxMaterialTimepickerHoursFaceComponent = /** @class */ (function () {
    function NgxMaterialTimepickerHoursFaceComponent() {
        this.hoursList = [];
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        var angleStep = 360 / HOURS;
        this.hoursList = Array(HOURS).fill(1).map(function (v, i) {
            return { time: v + i, angle: angleStep * (v + i) };
        });
    }
    NgxMaterialTimepickerHoursFaceComponent.prototype.onClick = function () {
        this.hourSelected.next();
    };
    return NgxMaterialTimepickerHoursFaceComponent;
}());
NgxMaterialTimepickerHoursFaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-material-timepicker-hours-face',
                template: "<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\n"
            },] },
];
NgxMaterialTimepickerHoursFaceComponent.ctorParameters = function () { return []; };
NgxMaterialTimepickerHoursFaceComponent.propDecorators = {
    "selectedHour": [{ type: Input },],
    "hourChange": [{ type: Output },],
    "hourSelected": [{ type: Output },],
    "onClick": [{ type: HostListener, args: ['touchend',] }, { type: HostListener, args: ['click',] },],
};
var MINUTES = 60;
var NgxMaterialTimepickerMinutesFaceComponent = /** @class */ (function () {
    function NgxMaterialTimepickerMinutesFaceComponent() {
        this.minutesList = [];
        this.timeUnit = TimeUnit;
        this.minuteChange = new EventEmitter();
        var angleStep = 360 / MINUTES;
        this.minutesList = Array(MINUTES).fill(0).map(function (v, i) {
            var index = (v + i);
            var angle = angleStep * index;
            return { time: index === 0 ? '00' : index, angle: angle !== 0 ? angle : 360 };
        });
    }
    return NgxMaterialTimepickerMinutesFaceComponent;
}());
NgxMaterialTimepickerMinutesFaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-material-timepicker-minutes-face',
                template: "<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\n"
            },] },
];
NgxMaterialTimepickerMinutesFaceComponent.ctorParameters = function () { return []; };
NgxMaterialTimepickerMinutesFaceComponent.propDecorators = {
    "selectedMinute": [{ type: Input },],
    "minuteChange": [{ type: Output },],
};
var NgxMaterialTimepickerFaceComponent = /** @class */ (function () {
    function NgxMaterialTimepickerFaceComponent() {
        this.timeUnit = TimeUnit;
        this.timeChange = new EventEmitter();
    }
    NgxMaterialTimepickerFaceComponent.prototype.ngAfterViewInit = function () {
        this.setClockHandPosition();
    };
    NgxMaterialTimepickerFaceComponent.prototype.ngOnChanges = function (changes) {
        if (changes && changes['selectedTime'].currentValue) {
            this.selectedTime = this.faceTime.find(function (time) { return time.time === changes['selectedTime'].currentValue.time; });
        }
    };
    NgxMaterialTimepickerFaceComponent.prototype.onMousedown = function (e) {
        e.preventDefault();
        this.isStarted = true;
    };
    NgxMaterialTimepickerFaceComponent.prototype.selectTime = function (e) {
        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {
            return;
        }
        var clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();
        var centerX = clockFaceCords.left + clockFaceCords.width / 2;
        var centerY = clockFaceCords.top + clockFaceCords.height / 2;
        var arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;
        var circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);
        var roundedAngle = roundAngle(circleAngle, 360 / this.faceTime.length);
        var selectedTime = this.faceTime.find(function (val) { return val.angle === roundedAngle; });
        this.clockHand.nativeElement.style.transform = "rotate(" + roundedAngle + "deg)";
        this.timeChange.next(selectedTime);
    };
    NgxMaterialTimepickerFaceComponent.prototype.onMouseup = function (e) {
        e.preventDefault();
        this.isStarted = false;
    };
    NgxMaterialTimepickerFaceComponent.prototype.setClockHandPosition = function () {
        this.clockHand.nativeElement.style.transform = "rotate(" + this.selectedTime.angle + "deg)";
    };
    return NgxMaterialTimepickerFaceComponent;
}());
NgxMaterialTimepickerFaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-material-timepicker-face',
                template: "<div class=\"clock-face\" #clockFace>\n  <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\n    <div class=\"clock-face__number\"\n         [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n         *ngFor=\"let time of faceTime\">\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n            [ngClass]=\"{'active': time.time === (selectedTime.time)}\">{{time.time}}</span>\n    </div>\n  </div>\n  <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\n        #clockHand></span>\n</div>\n<ng-template #minutesFace>\n  <div class=\"clock-face__container\">\n    <div class=\"clock-face__number\"\n         [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n         *ngFor=\"let time of faceTime\">\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n        [ngClass]=\"{'active': (selectedTime.time === time.time) && time.time % 5 === 0}\">\n\t{{time.time % 5 === 0 ? time.time : ''}}</span>\n    </div>\n  </div>\n</ng-template>\n",
                styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:20px;-webkit-box-sizing:border-box;box-sizing:border-box}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;font-size:16px;color:grey;-webkit-transform-origin:0 100%;transform-origin:0 100%;height:calc(290px / 2 - 20px);width:50px;text-align:center;z-index:2}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__clock-hand{display:block;height:110px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 110px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-3px;left:calc(50% - 8px);-webkit-box-sizing:content-box;box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number{height:calc(225px / 2 - 5px)}.clock-face__clock-hand{height:90px;top:calc(50% - 90px)}}"]
            },] },
];
NgxMaterialTimepickerFaceComponent.ctorParameters = function () { return []; };
NgxMaterialTimepickerFaceComponent.propDecorators = {
    "faceTime": [{ type: Input },],
    "selectedTime": [{ type: Input },],
    "unit": [{ type: Input },],
    "timeChange": [{ type: Output },],
    "clockFace": [{ type: ViewChild, args: ['clockFace',] },],
    "clockHand": [{ type: ViewChild, args: ['clockHand',] },],
    "onMousedown": [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] },],
    "selectTime": [{ type: HostListener, args: ['click', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event.changedTouches[0]'],] }, { type: HostListener, args: ['touchend', ['$event.changedTouches[0]'],] }, { type: HostListener, args: ['mousemove', ['$event'],] },],
    "onMouseup": [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] },],
};
function roundAngle(angle, step) {
    var roundedAngle = Math.round(angle / step) * step;
    return roundedAngle === 0 ? 360 : roundedAngle;
}
function countAngleByCords(x0, y0, x, y, currentAngle) {
    if (y > y0 && x >= x0) {
        return 180 - currentAngle;
    }
    else if (y > y0 && x < x0) {
        return 180 + currentAngle;
    }
    else if (y < y0 && x < x0) {
        return 360 - currentAngle;
    }
    else {
        return currentAngle;
    }
}
var TimeFormatterPipe = /** @class */ (function () {
    function TimeFormatterPipe() {
    }
    TimeFormatterPipe.prototype.transform = function (time, timeUnit) {
        if (!time) {
            return time;
        }
        switch (timeUnit) {
            case TimeUnit.HOUR:
                return utc(time * 3600 * 1000).format('HH');
            case TimeUnit.MINUTE:
                return utc(time * 60 * 1000).format('mm');
        }
    };
    return TimeFormatterPipe;
}());
TimeFormatterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'timeFormatter'
            },] },
];
TimeFormatterPipe.ctorParameters = function () { return []; };
var NgxMaterialTimepickerButtonComponent = /** @class */ (function () {
    function NgxMaterialTimepickerButtonComponent() {
    }
    return NgxMaterialTimepickerButtonComponent;
}());
NgxMaterialTimepickerButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-material-timepicker-button',
                template: "<button class=\"timepicker-button\" type=\"button\">\n  <span><ng-content></ng-content></span>\n</button>\n",
                styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1);transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}"]
            },] },
];
NgxMaterialTimepickerButtonComponent.ctorParameters = function () { return []; };
var moment$2 = moment;
var VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TimepickerDirective; }),
    multi: true
};
var TimepickerDirective = /** @class */ (function () {
    function TimepickerDirective(elementRef) {
        this.elementRef = elementRef;
        this.onTouched = function () {
        };
        this.onChange = function () {
        };
    }
    Object.defineProperty(TimepickerDirective.prototype, "format", {
        set: function (value) {
            this._format = value === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimepickerDirective.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = formatTime(value, this._format);
            this.elementRef.nativeElement.value = value ? formatTime(value, this._format) : '';
            this.timepicker.setDefaultTime(formatTime(value));
        },
        enumerable: true,
        configurable: true
    });
    TimepickerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.timepicker) {
            this.timepickerSubscription = this.timepicker.timeSet.subscribe(function (time) {
                _this.value = time;
                _this.onChange(time);
                _this.onTouched();
            });
        }
    };
    TimepickerDirective.prototype.onInput = function (value) {
        this._value = value;
        this.onChange(value);
    };
    TimepickerDirective.prototype.onClick = function () {
        this.timepicker.open();
    };
    TimepickerDirective.prototype.writeValue = function (value) {
        this.value = value;
    };
    TimepickerDirective.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TimepickerDirective.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TimepickerDirective.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    TimepickerDirective.prototype.ngOnDestroy = function () {
        this.timepickerSubscription.unsubscribe();
    };
    return TimepickerDirective;
}());
TimepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxTimepicker]',
                providers: [VALUE_ACCESSOR],
                host: {
                    '[disabled]': 'disabled',
                    '(input)': 'onInput($event.target.value)',
                    '(blur)': 'onTouched()',
                }
            },] },
];
TimepickerDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
TimepickerDirective.propDecorators = {
    "timepicker": [{ type: Input, args: ['ngxTimepicker',] },],
    "disabled": [{ type: Input },],
    "format": [{ type: Input },],
    "value": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click',] },],
};
function formatTime(time, format) {
    if (format === void 0) { format = TimeFormat.TWELVE; }
    return moment$2(time, format).format(format);
}
var OverlayDirective = /** @class */ (function () {
    function OverlayDirective(eventService) {
        this.eventService = eventService;
    }
    OverlayDirective.prototype.onClick = function (e) {
        this.eventService.backdropClickSubject.next(e);
        e.preventDefault();
    };
    return OverlayDirective;
}());
OverlayDirective.decorators = [
    { type: Directive, args: [{
                selector: '[overlay]'
            },] },
];
OverlayDirective.ctorParameters = function () { return [
    { type: NgxMaterialTimepickerEventService, },
]; };
OverlayDirective.propDecorators = {
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};
var FocusAnchorDirective = /** @class */ (function () {
    function FocusAnchorDirective(document, elementRef) {
        this.document = document;
        this.element = elementRef.nativeElement;
    }
    FocusAnchorDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.activeElement = (this.document.activeElement);
        setTimeout(function () { return _this.element.focus(); });
    };
    FocusAnchorDirective.prototype.ngOnDestroy = function () {
        this.activeElement.focus();
    };
    return FocusAnchorDirective;
}());
FocusAnchorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[focusAnchor]'
            },] },
];
FocusAnchorDirective.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },
    { type: ElementRef, },
]; };
var NgxMaterialTimepickerModule = /** @class */ (function () {
    function NgxMaterialTimepickerModule() {
    }
    NgxMaterialTimepickerModule.forRoot = function () {
        return {
            ngModule: NgxMaterialTimepickerModule,
            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]
        };
    };
    return NgxMaterialTimepickerModule;
}());
NgxMaterialTimepickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                exports: [
                    NgxMaterialTimepickerComponent,
                    TimepickerDirective
                ],
                declarations: [
                    NgxMaterialTimepickerComponent,
                    StyleSanitizerPipe,
                    NgxMaterialTimepickerHoursFaceComponent,
                    NgxMaterialTimepickerMinutesFaceComponent,
                    NgxMaterialTimepickerFaceComponent,
                    TimeFormatterPipe,
                    NgxMaterialTimepickerButtonComponent,
                    TimepickerDirective,
                    OverlayDirective,
                    FocusAnchorDirective,
                ]
            },] },
];
NgxMaterialTimepickerModule.ctorParameters = function () { return []; };

export { NgxMaterialTimepickerModule, NgxMaterialTimepickerButtonComponent as ɵk, NgxMaterialTimepickerFaceComponent as ɵi, NgxMaterialTimepickerHoursFaceComponent as ɵg, NgxMaterialTimepickerMinutesFaceComponent as ɵh, FocusAnchorDirective as ɵm, TimepickerDirective as ɵe, OverlayDirective as ɵl, AnimationState as ɵa, NgxMaterialTimepickerComponent as ɵb, StyleSanitizerPipe as ɵf, TimeFormatterPipe as ɵj, NgxMaterialTimepickerEventService as ɵd, NgxMaterialTimepickerService as ɵc };
//# sourceMappingURL=ngx-material-timepicker.js.map
