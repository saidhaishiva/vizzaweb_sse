{
  "version": 3,
  "file": "ngx-material-timepicker.umd.min.js",
  "sources": [
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-period.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-format.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/time-formatter.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-timepicker.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/overlay.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/focus-anchor.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.module.ts"
  ],
  "sourcesContent": [
    "export enum TimePeriod {\r\n\tAM = 'AM',\r\n\tPM = 'PM'\r\n}\r\n",
    "export enum TimeFormat {\r\n\tTWELVE = 'hh:mm a',\r\n\tTWENTY_FOUR = 'HH:mm'\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: '00',\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n    get fullTime(): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = this.periodSubject.getValue();\r\n\r\n        return `${hour}:${minute} ${period}`;\r\n    }\r\n\r\n    set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes() === 0 ? '00' : defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        }\r\n    }\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {Subject, Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n}\r\n",
    "import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService,} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\n\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    template: `<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\r\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\r\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\"\r\n         focusAnchor>\r\n        <header class=\"timepicker__header\">\r\n            <div class=\"timepicker-dial\">\r\n                <div class=\"timepicker-dial__time\">\r\n\t\t\t\t<span class=\"timepicker-dial__item\"\r\n                      [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.HOUR}\"\r\n                      (click)=\"changeTimeUnit(timeUnit.HOUR)\">\r\n\t\t\t\t\t{{selectedHour?.time | timeFormatter: timeUnit.HOUR}}</span>:<span\r\n                    class=\"timepicker-dial__item\"\r\n                    [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.MINUTE}\"\r\n                    (click)=\"changeTimeUnit(timeUnit.MINUTE)\">{{selectedMinute?.time | timeFormatter: timeUnit.MINUTE}}</span>\r\n                </div>\r\n                <div class=\"timepicker-dial__period\">\r\n\t\t\t<span class=\"timepicker-dial__item\"\r\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\r\n                  (click)=\"changePeriod(timePeriod.AM)\">AM</span>\r\n                    <span class=\"timepicker-dial__item\"\r\n                          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\r\n                          (click)=\"changePeriod(timePeriod.PM)\">PM</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"timepicker__main-content\">\r\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\r\n                <ngx-material-timepicker-hours-face *ngSwitchCase=\"timeUnit.HOUR\"\r\n                                                    (hourChange)=\"onHourChange($event)\"\r\n                                                    [selectedHour]=\"selectedHour\"\r\n                                                    (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-hours-face>\r\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                      [selectedMinute]=\"selectedMinute\"\r\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\r\n            </div>\r\n            <div class=\"timepicker__actions\">\r\n                <div (click)=\"close()\">\r\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n                </div>\r\n                <div (click)=\"setTime()\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #cancelBtnDefault>\r\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;-webkit-box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__actions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;background-color:#fff}.timepicker-dial{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__period{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-left:10px;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:-webkit-box;display:-ms-flexbox;display:flex;width:515px}.timepicker__header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__main-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}.timepicker-dial{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.timepicker-dial__period{margin-left:0}}`],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timePeriod = TimePeriod;\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Output() timeSet = new EventEmitter<string>();\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour.subscribe(hour => this.selectedHour = hour));\r\n        this.subscriptions.push(this.timepickerService.selectedMinute.subscribe(minute => this.selectedMinute = minute));\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod.subscribe(period => this.selectedPeriod = period));\r\n\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.fullTime);\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.defaultTime = time;\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.keydownEventSubject.next(e);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n\tname: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n\tconstructor(private domSanitizer: DomSanitizer) {\r\n\t}\r\n\r\n\ttransform(value: string): any {\r\n\t\tif (!value) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn this.domSanitizer.bypassSecurityTrustStyle(value);\r\n\t}\r\n\r\n}\r\n",
    "import {Component, EventEmitter, HostListener, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\n\r\nconst HOURS = 12;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\r\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\r\n`\r\n})\r\nexport class NgxMaterialTimepickerHoursFaceComponent {\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    constructor() {\r\n        const angleStep = 360 / HOURS;\r\n        this.hoursList = Array(HOURS).fill(1).map((v, i) => {\r\n            return {time: v + i, angle: angleStep * (v + i)};\r\n        });\r\n    }\r\n\r\n    @HostListener('touchend')\r\n    @HostListener('click')\r\n    onClick() {\r\n        this.hourSelected.next();\r\n    }\r\n}\r\n\r\n",
    "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst MINUTES = 60;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    template: `<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\r\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\r\n`\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    constructor() {\r\n        const angleStep = 360 / MINUTES;\r\n        this.minutesList = Array(MINUTES).fill(0).map((v, i) => {\r\n            const index = (v + i);\r\n            const angle = angleStep * index;\r\n            return {time: index === 0 ? '00' : index, angle: angle !== 0 ? angle : 360};\r\n        })\r\n    }\r\n}\r\n\r\n",
    "import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input, OnChanges,\r\n    Output, SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    template: `<div class=\"clock-face\" #clockFace>\r\n  <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\r\n    <div class=\"clock-face__number\"\r\n         [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n         *ngFor=\"let time of faceTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n            [ngClass]=\"{'active': time.time === (selectedTime.time)}\">{{time.time}}</span>\r\n    </div>\r\n  </div>\r\n  <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n        #clockHand></span>\r\n</div>\r\n<ng-template #minutesFace>\r\n  <div class=\"clock-face__container\">\r\n    <div class=\"clock-face__number\"\r\n         [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n         *ngFor=\"let time of faceTime\">\r\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n        [ngClass]=\"{'active': (selectedTime.time === time.time) && time.time % 5 === 0}\">\r\n\t{{time.time % 5 === 0 ? time.time : ''}}</span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:20px;-webkit-box-sizing:border-box;box-sizing:border-box}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;font-size:16px;color:grey;-webkit-transform-origin:0 100%;transform-origin:0 100%;height:calc(290px / 2 - 20px);width:50px;text-align:center;z-index:2}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__clock-hand{display:block;height:110px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 110px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-3px;left:calc(50% - 8px);-webkit-box-sizing:content-box;box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number{height:calc(225px / 2 - 5px)}.clock-face__clock-hand{height:90px;top:calc(50% - 90px)}}`]\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes && changes['selectedTime'].currentValue) {\r\n            this.selectedTime = this.faceTime.find(time => time.time === changes['selectedTime'].currentValue.time);\r\n        }\r\n    }\r\n\r\n    @HostListener('touchstart', ['$event'])\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        //Get x0 and y0 of the circle\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        //Counting the arctangent and convert it to from radian to deg\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        //Get angle according to quadrant\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        //Round angle according to angle step\r\n        const roundedAngle = roundAngle(circleAngle, 360 / this.faceTime.length);\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${roundedAngle}deg)`;\r\n        this.timeChange.next(selectedTime);\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    private setClockHandPosition() {\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    const roundedAngle = Math.round(angle / step) * step;\r\n    return roundedAngle === 0 ? 360 : roundedAngle;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {\r\n        return 360 - currentAngle;\r\n    } else {\r\n        return currentAngle;\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n\tname: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n\ttransform(time: number, timeUnit: TimeUnit): any {\r\n\t\tif (!time) {\r\n\t\t\treturn time;\r\n\t\t}\r\n\t\tswitch (timeUnit) {\r\n\t\t\tcase TimeUnit.HOUR:\r\n\t\t\t\treturn moment.utc(time * 3600 * 1000).format('HH');\r\n\t\t\tcase TimeUnit.MINUTE:\r\n\t\t\t\treturn moment.utc(time * 60 * 1000).format('mm');\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
    "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    template: `<button class=\"timepicker-button\" type=\"button\">\r\n  <span><ng-content></ng-content></span>\r\n</button>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1);transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}`]\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n",
    "import {AfterViewInit, Directive, ElementRef, forwardRef, HostListener, Input, OnDestroy} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport * as moment_ from 'moment';\r\n//Workaround for error \"Cannot call a namespace ('moment')\r\nconst moment = moment_;\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    }\r\n})\r\nexport class TimepickerDirective implements AfterViewInit, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input('ngxTimepicker') timepicker: NgxMaterialTimepickerComponent;\r\n    @Input() disabled: boolean;\r\n    onTouched = () => {\r\n    };\r\n    private timepickerSubscription: Subscription;\r\n    private onChange: (value: any) => void = () => {\r\n    };\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private _format: TimeFormat;\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n    }\r\n\r\n    private _value: string;\r\n\r\n    @Input()\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this._value = formatTime(value, this._format);\r\n        this.elementRef.nativeElement.value = value ? formatTime(value, this._format) : '';\r\n        this.timepicker.setDefaultTime(formatTime(value));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.timepicker) {\r\n            this.timepickerSubscription = this.timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(time);\r\n                this.onTouched();\r\n            })\r\n        }\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this._value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    @HostListener('click')\r\n    onClick() {\r\n        this.timepicker.open();\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscription.unsubscribe();\r\n    }\r\n}\r\n\r\nfunction formatTime(time: string, format = TimeFormat.TWELVE): string {\r\n    return moment(time, format).format(format);\r\n}\r\n",
    "import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService,} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.backdropClickSubject.next(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n",
    "import {AfterViewInit, Directive, ElementRef, Inject, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[focusAnchor]'\r\n})\r\nexport class FocusAnchorDirective implements AfterViewInit, OnDestroy {\r\n\r\n    private activeElement: HTMLElement;\r\n    private element: HTMLElement;\r\n\r\n    constructor(@Optional() @Inject(DOCUMENT) private document: any,\r\n                elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.activeElement = <HTMLElement>this.document.activeElement;\r\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => this.element.focus())\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.activeElement.focus();\r\n    }\r\n}\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {NgxMaterialTimepickerHoursFaceComponent} from './components/timepicker-hours-face/ngx-material-timepicker-hours-face.component';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {FocusAnchorDirective} from './directives/focus-anchor.directive';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        TimepickerDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        StyleSanitizerPipe,\r\n        NgxMaterialTimepickerHoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        TimeFormatterPipe,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        FocusAnchorDirective,\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        }\r\n    }\r\n}\r\n"
  ],
  "names": [
    "AM",
    "PM",
    "TWELVE",
    "TWENTY_FOUR",
    "moment",
    "moment_",
    "DEFAULT_HOUR",
    "time",
    "angle",
    "DEFAULT_MINUTE",
    "NgxMaterialTimepickerService",
    "this",
    "hourSubject",
    "BehaviorSubject",
    "minuteSubject",
    "periodSubject",
    "TimePeriod",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "hour",
    "next",
    "get",
    "asObservable",
    "minute",
    "period",
    "getValue",
    "defaultTime",
    "TimeFormat",
    "toDate",
    "isValid",
    "assign",
    "getHours",
    "getMinutes",
    "substr",
    "length",
    "toUpperCase",
    "type",
    "Injectable",
    "NgxMaterialTimepickerEventService",
    "backdropClickSubject",
    "Subject",
    "keydownEventSubject",
    "ENTER",
    "LEAVE",
    "ESCAPE",
    "NgxMaterialTimepickerComponent",
    "timepickerService",
    "eventService",
    "_this",
    "timePeriod",
    "timeUnit",
    "TimeUnit",
    "activeTimeUnit",
    "HOUR",
    "isOpened",
    "subscriptions",
    "isEsc",
    "timeSet",
    "EventEmitter",
    "push",
    "merge",
    "backdropClick",
    "keydownEvent",
    "pipe",
    "filter",
    "e",
    "keyCode",
    "subscribe",
    "close",
    "ngOnInit",
    "selectedHour",
    "selectedMinute",
    "selectedPeriod",
    "onHourChange",
    "onMinuteChange",
    "changePeriod",
    "changeTimeUnit",
    "unit",
    "setTime",
    "fullTime",
    "setDefaultTime",
    "open",
    "animationState",
    "AnimationState",
    "animationDone",
    "event",
    "phaseName",
    "toState",
    "onKeydown",
    "ngOnDestroy",
    "forEach",
    "subscription",
    "unsubscribe",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "animations",
    "trigger",
    "transition",
    "style",
    "transform",
    "animate",
    "opacity",
    "providers",
    "cancelBtnTmpl",
    "Input",
    "confirmBtnTmpl",
    "Output",
    "HostListener",
    "StyleSanitizerPipe",
    "domSanitizer",
    "value",
    "bypassSecurityTrustStyle",
    "Pipe",
    "name",
    "DomSanitizer",
    "HOURS",
    "NgxMaterialTimepickerHoursFaceComponent",
    "hoursList",
    "hourChange",
    "hourSelected",
    "angleStep",
    "Array",
    "fill",
    "map",
    "v",
    "i",
    "onClick",
    "MINUTES",
    "NgxMaterialTimepickerMinutesFaceComponent",
    "minutesList",
    "minuteChange",
    "index",
    "NgxMaterialTimepickerFaceComponent",
    "timeChange",
    "ngAfterViewInit",
    "setClockHandPosition",
    "ngOnChanges",
    "changes",
    "currentValue",
    "selectedTime",
    "faceTime",
    "find",
    "onMousedown",
    "preventDefault",
    "isStarted",
    "selectTime",
    "MouseEvent",
    "x0",
    "y0",
    "x",
    "y",
    "currentAngle",
    "step",
    "roundedAngle",
    "clockFaceCords",
    "clockFace",
    "nativeElement",
    "getBoundingClientRect",
    "centerX",
    "left",
    "width",
    "centerY",
    "top",
    "height",
    "arctangent",
    "Math",
    "atan",
    "abs",
    "clientX",
    "clientY",
    "PI",
    "circleAngle",
    "round",
    "val",
    "clockHand",
    "onMouseup",
    "ViewChild",
    "TimeFormatterPipe",
    "moment.utc",
    "format",
    "MINUTE",
    "NgxMaterialTimepickerButtonComponent",
    "VALUE_ACCESSOR",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "TimepickerDirective",
    "multi",
    "elementRef",
    "onTouched",
    "onChange",
    "_format",
    "_value",
    "formatTime",
    "timepicker",
    "timepickerSubscription",
    "onInput",
    "writeValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDisabledState",
    "isDisabled",
    "disabled",
    "Directive",
    "host",
    "[disabled]",
    "(input)",
    "(blur)",
    "ElementRef",
    "OverlayDirective",
    "FocusAnchorDirective",
    "document",
    "element",
    "activeElement",
    "setTimeout",
    "focus",
    "undefined",
    "decorators",
    "Optional",
    "Inject",
    "DOCUMENT",
    "NgxMaterialTimepickerModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "imports",
    "CommonModule",
    "exports",
    "declarations"
  ],
  "mappings": "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"
}
