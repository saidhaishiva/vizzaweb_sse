{"version":3,"sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"names":["MatSelectSearchClearDirective","Directive","args","selector","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","this","placeholderLabel","type","noEntriesFoundLabel","clearSearchInput","searching","disableInitialFocus","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAll","EventEmitter","onChange","_","onTouched","overlayClassSet","change","_onDestroy","Subject","Object","defineProperty","prototype","_value","ngOnInit","_this","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","openedChange","pipe","delay","takeUntil","subscribe","opened","updateInputWidth","_focus","_reset","take","_keyManager","adjustScrollTopToFitActiveOptionIntoView","console","log","_options","options","changes","keyManager","panelOpen","setTimeout","setFirstItemActive","_noEntriesFound","remove","detectChanges","initMultipleHandling","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","next","complete","ngAfterViewInit","setOverlayClass","markForCheck","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","key","length","keyCode","A","Z","ZERO","NINE","SPACE","HOME","END","stopPropagation","writeValue","value","onInputChange","initMultiSelectedValues","onBlur","registerOnChange","fn","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","overlayClasses","overlayDir","attach","overlayElement","element","parentElement","contains","forEach","overlayClass","valueChange","values","restoreSelectedValues_1","previousSelectedValues","optionValues_1","map","option","previousValue","indexOf","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","SELECT_PANEL_MAX_HEIGHT","indexOfFirstVisibleOption","round","panelElement","style","width","clientWidth","first","getBoundingClientRect","height","filter","selected","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","MatSelect","decorators","Inject","ChangeDetectorRef","ViewportRuler","MatOption","Optional","Input","Output","ViewChild","read","ElementRef","ContentChild","HostBinding","NgxMatSelectSearchModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild, Optional, HostBinding, Output\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect, SELECT_PANEL_MAX_HEIGHT, _countGroupLabelsBeforeOption } from '@angular/material';\nimport {\n  A,\n  Z,\n  ZERO,\n  NINE,\n  SPACE, END, HOME,\n} from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Subject } from 'rxjs';\nimport { delay, take, takeUntil } from 'rxjs/operators';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = 'text';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n  @Input() showToggleAllCheckbox = false;\n\n  /** select all checkbox checked state */\n  @Input() toggleAllCheckboxChecked = false;\n\n  /** select all checkbox indeterminate state */\n  @Input() toggleAllCheckboxIndeterminate = false;\n\n  /** Output emitter to send to parent component with the toggle all boolean */\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              public changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() @Inject(MatOption) public matOption: MatOption = null) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        (<string[]>this.matSelect.panelClass).push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                // set first item active and input width\n                keyManager.setFirstItemActive();\n                this.updateInputWidth();\n\n                // set no entries found class on mat option\n                if (this.matOption) {\n                  if (this._noEntriesFound()) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                  } else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                  }\n                }\n\n                if (!this.disableScrollToActiveOnOptionsChanged) {\n                  this.adjustScrollTopToFitActiveOptionIntoView();\n                }\n\n              }, 1);\n\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n  }\n\n  _emitSelectAllBooleanToParent(state: boolean) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.setOverlayClass();\n    });\n\n    // update view when available options change\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => {\n        this.matSelect.options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n          });\n      });\n  }\n\n  _isToggleAllCheckboxVisible(): boolean {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\n    ) {\n      event.stopPropagation();\n    }\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (this.matOption && !focus) {\n      // remove no entries found class on mat option\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n    }\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\n\n    if (!this.matOption) {\n      // add offset to panel if component is not placed inside mat-option\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\n    }\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayClasses.forEach(overlayClass => {\n            overlayElement.classList.add(overlayClass);\n          });\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  private getMatOptionHeight(): number {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n  /**\n   * Returns whether the \"no entries found\" message should be displayed\n   */\n  public _noEntriesFound(): boolean {\n    if (!this._options) {\n      return;\n    }\n    if (this.matOption) {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 1;\n    } else {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule, MatInputModule, MatIconModule, MatProgressSpinnerModule, MatCheckboxModule } from '@angular/material';\nimport { CommonModule } from '@angular/common';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\nexport const MatSelectSearchVersion = '1.8.0';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"]}