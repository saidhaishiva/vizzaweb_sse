import { __spread } from 'tslib';
import { Injectable, Inject, Directive, Renderer2, Input, ElementRef, NgModule } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { tap, filter } from 'rxjs/operators';

var Gtag = /** @class */ (function () {
    function Gtag(gaConfig, router) {
        var _this = this;
        this.router = router;
        this.mergedConfig = Object.assign({ trackPageviews: true }, gaConfig);
        if (this.mergedConfig.trackPageviews) {
            router.events
                .pipe(filter(function (event) { return event instanceof NavigationEnd; }), tap(function (event) {
                _this.pageview();
            }))
                .subscribe();
        }
    }
    Gtag.prototype.event = function (action, params) {
        if (params === void 0) { params = {}; }
        try {
            gtag('event', action, params);
            this.debug('event', this.mergedConfig.trackingId, action, params);
        }
        catch (err) {
            console.error('Google Analytics event error', err);
        }
    };
    Gtag.prototype.pageview = function (params) {
        try {
            var defaults = {
                page_path: this.router.url,
                page_title: 'Angular App',
                page_location: window.location.href
            };
            params = Object.assign({}, defaults, params);
            gtag('config', this.mergedConfig.trackingId, params);
            this.debug('pageview', this.mergedConfig.trackingId, params);
        }
        catch (err) {
            console.error('Google Analytics pageview error', err);
        }
    };
    Gtag.prototype.config = function (params) {
        try {
            gtag('config', this.mergedConfig.trackingId, (params = {}));
        }
        catch (err) {
            console.error('Google Analytics config error', err);
        }
    };
    Gtag.prototype.set = function (params) {
        try {
            gtag('set', (params = {}));
        }
        catch (err) {
            console.error('Google Analytics set error', err);
        }
    };
    Gtag.prototype.debug = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (this.mergedConfig.debug) {
            console.log.apply(console, __spread(['angular-gtag:'], msg));
        }
    };
    return Gtag;
}());
Gtag.decorators = [
    { type: Injectable },
];
Gtag.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: ['config',] },] },
    { type: Router, },
]; };
var GtagEventDirective = /** @class */ (function () {
    function GtagEventDirective(gtag, renderer, el) {
        this.gtag = gtag;
        this.renderer = renderer;
        this.el = el;
    }
    GtagEventDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        try {
            this.renderer.listen(this.el.nativeElement, this.trackOn, function () {
                _this.gtag.event(_this.action || _this.trackOn, Object.assign({ event_category: _this.category }, _this.params));
            });
        }
        catch (err) {
            console.error(err);
        }
    };
    return GtagEventDirective;
}());
GtagEventDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gtagEvent]'
            },] },
];
GtagEventDirective.ctorParameters = function () { return [
    { type: Gtag, },
    { type: Renderer2, },
    { type: ElementRef, },
]; };
GtagEventDirective.propDecorators = {
    "trackOn": [{ type: Input },],
    "action": [{ type: Input },],
    "category": [{ type: Input },],
    "params": [{ type: Input },],
};
var GtagModule = /** @class */ (function () {
    function GtagModule() {
    }
    GtagModule.forRoot = function (config) {
        return {
            ngModule: GtagModule,
            providers: [Gtag, { provide: 'config', useValue: config }]
        };
    };
    return GtagModule;
}());
GtagModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GtagEventDirective],
                exports: [GtagEventDirective]
            },] },
];

export { Gtag, GtagEventDirective, GtagModule };
//# sourceMappingURL=angular-gtag.js.map
