(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define('angular-gtag', ['exports', '@angular/core', '@angular/router', 'rxjs/operators'], factory) :
	(factory((global['angular-gtag'] = {}),global.ng.core,global.ng.router,global.Rx.Observable.prototype));
}(this, (function (exports,core,router,operators) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */










function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var Gtag = /** @class */ (function () {
    function Gtag(gaConfig, router$$1) {
        var _this = this;
        this.router = router$$1;
        this.mergedConfig = Object.assign({ trackPageviews: true }, gaConfig);
        if (this.mergedConfig.trackPageviews) {
            router$$1.events
                .pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }), operators.tap(function (event) {
                _this.pageview();
            }))
                .subscribe();
        }
    }
    Gtag.prototype.event = function (action, params) {
        if (params === void 0) { params = {}; }
        try {
            gtag('event', action, params);
            this.debug('event', this.mergedConfig.trackingId, action, params);
        }
        catch (err) {
            console.error('Google Analytics event error', err);
        }
    };
    Gtag.prototype.pageview = function (params) {
        try {
            var defaults = {
                page_path: this.router.url,
                page_title: 'Angular App',
                page_location: window.location.href
            };
            params = Object.assign({}, defaults, params);
            gtag('config', this.mergedConfig.trackingId, params);
            this.debug('pageview', this.mergedConfig.trackingId, params);
        }
        catch (err) {
            console.error('Google Analytics pageview error', err);
        }
    };
    Gtag.prototype.config = function (params) {
        try {
            gtag('config', this.mergedConfig.trackingId, (params = {}));
        }
        catch (err) {
            console.error('Google Analytics config error', err);
        }
    };
    Gtag.prototype.set = function (params) {
        try {
            gtag('set', (params = {}));
        }
        catch (err) {
            console.error('Google Analytics set error', err);
        }
    };
    Gtag.prototype.debug = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (this.mergedConfig.debug) {
            console.log.apply(console, __spread(['angular-gtag:'], msg));
        }
    };
    return Gtag;
}());
Gtag.decorators = [
    { type: core.Injectable },
];
Gtag.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: ['config',] },] },
    { type: router.Router, },
]; };
var GtagEventDirective = /** @class */ (function () {
    function GtagEventDirective(gtag, renderer, el) {
        this.gtag = gtag;
        this.renderer = renderer;
        this.el = el;
    }
    GtagEventDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        try {
            this.renderer.listen(this.el.nativeElement, this.trackOn, function () {
                _this.gtag.event(_this.action || _this.trackOn, Object.assign({ event_category: _this.category }, _this.params));
            });
        }
        catch (err) {
            console.error(err);
        }
    };
    return GtagEventDirective;
}());
GtagEventDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[gtagEvent]'
            },] },
];
GtagEventDirective.ctorParameters = function () { return [
    { type: Gtag, },
    { type: core.Renderer2, },
    { type: core.ElementRef, },
]; };
GtagEventDirective.propDecorators = {
    "trackOn": [{ type: core.Input },],
    "action": [{ type: core.Input },],
    "category": [{ type: core.Input },],
    "params": [{ type: core.Input },],
};
var GtagModule = /** @class */ (function () {
    function GtagModule() {
    }
    GtagModule.forRoot = function (config) {
        return {
            ngModule: GtagModule,
            providers: [Gtag, { provide: 'config', useValue: config }]
        };
    };
    return GtagModule;
}());
GtagModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [GtagEventDirective],
                exports: [GtagEventDirective]
            },] },
];

exports.Gtag = Gtag;
exports.GtagEventDirective = GtagEventDirective;
exports.GtagModule = GtagModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-gtag.umd.js.map
